# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  pull_request:
    paths-ignore:
      - "README.md"

  push:
    branches:
      - "main"
    paths-ignore:
      - "README.md"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v5

      - name: Check Go Versions
        run: ./scripts/check_go_version.sh

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24.2"
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Build
        env:
          CGO_ENABLED: "0"
        run: |
          go build -v .

      - name: Check Versions
        id: checkversions
        run: |
          source <(go run ./scripts/coderversion)
          echo "CODER_MAINLINE_VERSION=${CODER_MAINLINE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "CODER_STABLE_VERSION=${CODER_STABLE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "CODER_OLDSTABLE_VERSION=${CODER_OLDSTABLE_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Run integration test (devel)
        timeout-minutes: 10
        env:
          CODER_IMAGE: "ghcr.io/coder/coder-preview"
          CODER_VERSION: "latest"
        run: |
          go test -v ./integration

      - name: Run integration test (mainline)
        timeout-minutes: 10
        env:
          CODER_IMAGE: "ghcr.io/coder/coder"
          CODER_VERSION: ${{ steps.checkversions.outputs.CODER_MAINLINE_VERSION }}
        run: |
          go test -v ./integration

      - name: Run integration test (stable)
        timeout-minutes: 10
        env:
          CODER_IMAGE: "ghcr.io/coder/coder"
          CODER_VERSION: ${{ steps.checkversions.outputs.CODER_STABLE_VERSION }}
        run: |
          go test -v ./integration

      - name: Run integration test (oldstable)
        timeout-minutes: 10
        env:
          CODER_IMAGE: "ghcr.io/coder/coder"
          CODER_VERSION: ${{ steps.checkversions.outputs.CODER_OLDSTABLE_VERSION }}
        run: |
          go test -v ./integration

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - "1.9.*"
          - "1.10.*"
          - "1.11.*"
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v5

      - name: Check Go Versions
        run: ./scripts/check_go_version.sh

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24.2"
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: TF acceptance tests
        timeout-minutes: 10
        env:
          TF_ACC: "1"
        run: |
          go test -v -cover ./provider/

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v5

      - name: Check Go Versions
        run: ./scripts/check_go_version.sh

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24.2"
        id: go

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"
          terraform_wrapper: false

      - name: Get dependencies
        run: |
          go mod download

      - name: Lint fmt
        run: |
          make fmt
          git diff --exit-code

      - name: Lint gen
        run: |
          make gen
          git diff --exit-code
